<script type="application/json">
  {
    "usingComponents": {
      "van-tab": "vant-weapp/dist/tab/index",
      "van-tabs": "vant-weapp/dist/tabs/index",
      "van-card": "vant-weapp/dist/card/index",
      "van-button": "vant-weapp/dist/button/index",
      "mp-loading": "weui-miniprogram/miniprogram_dist/loading/loading"
    }
  }
</script>

<template>
  <view class="my-order">
    <van-tabs active="{{ activeTab }}" bind:change="tabChange">
      <van-tab title="全部"></van-tab>
      <van-tab title="待付款"></van-tab>
      <van-tab title="待使用"></van-tab>
      <van-tab title="待评价"></van-tab>
      <van-tab title="退款中"></van-tab>
    </van-tabs>
    <van-card wx:for="{{orders}}" wx:key="index" lazy-load="true" custom-class="card-item"
              tag="{{statusMap[item.status]}}" title="{{ item.merchant.nickName }}" desc="{{item.product.title}}"
              price="{{item.total}}" bindtap="orderDetail(item)"
              thumb="{{'http://yqxq.oss-cn-hangzhou.aliyuncs.com/'+item.product.coverPhoto}}">
      <view slot="bottom">
        <view>预约时间：{{item.startDate}} 到 {{item.lastDate}}</view>
      </view>
      <view slot="footer">
        <!-- 使用小程序原生事件才能阻止冒泡 -->
        <van-button size="mini" custom-class="card-btn" catch:tap="evaluate(item)"
                    wx:if="{{item.status == 'used' || item.status == 'overdue'}}">
          评价
        </van-button>
        <van-button size="mini" catch:tap="refund(item)" custom-class="card-btn"
                    wx:if="{{item.status == 'unused' || item.status == 'used' || item.status == 'overdue' || item.status == 'evaluated'}}">
          申请退款
        </van-button>
      </view>
    </van-card>
    <view class="empty-order" wx:if="{{!orders.length && !requesting}}"></view>
    <mp-loading type="circle" show="{{hasNext || requesting}}" class="loading" wx:ref="loading"></mp-loading>
  </view>
</template>

<script>
    import {createPage} from '@mpxjs/core'
    import store from '../components/store'

    let app = getApp();
    createPage({
        data: {
            activeTab: 0,
            statusMap: {
                'pending': '待付款',
                'unused': '待使用',
                'used': '待评价',
                'overdue': '待评价',
                'evaluated': '已评价',
                'refunding': '退款中',
                'refunded': '已退款'
            },
            tabToStatus: {
                1: ['pending'],
                2: ['unused'],
                3: ['used', 'overdue'],
                4: ['refunding']
            },
            orders: [],
            pageNum: 1,
            hasNext: false,
            requesting: false,  // 是否正在请求
        },
        onLoad(options) {
            wx.showShareMenu();
            wx.setNavigationBarTitle({
                title: '我的订单'
            });

            // 这里只是定义查询规则，后面的 exec() 才真正查询
            this.query = this.createSelectorQuery();
            this.query.select('.loading').boundingClientRect();
        },
        onShow() {
            this.getTabBar && this.getTabBar().setData({
                active: 2
            });
            this.orders = [];
            this.fetchOrders();
        },
        onPageScroll() {
            // 正在查询元素，正在请求数据，没有更多数据
            if (this.requesting || !this.hasNext) {
                return;
            }
            this.query.exec((res) => {
                if (!this.requesting && res[0].top < store.state.systemInfo.windowHeight - 50) {
                    this.pageNum++;
                    this.fetchOrders();
                }
            })
        },
        tabChange(event) {
            this.activeTab = event.detail.index;
            this.orders = [];
            this.fetchOrders();
        },
        fetchOrders() {
            this.requesting = true;
            wx.request({
                method: 'POST',
                url: `${app.globalData.basePath}/weapp/order/mine`,
                header: {
                    'Cookie': wx.getStorageSync("sessionId")
                },
                data: {
                    pageNum: this.pageNum,
                    pageSize: 10,
                    statusList: this.tabToStatus[this.activeTab] || null
                },
                success: (res) => {
                    res = res.data;
                    if (res.code == 0) {
                        this.orders = this.orders.concat(res.data.list);
                        this.hasNext = res.data.hasNextPage;
                        this.requesting = false;
                        this.onPageScroll();  // 怕没滚动时，加载图标就出现了，主动触发一次滚动响应
                    } else if (res.code == 401) {
                        app.loginWx();
                    }
                },
                complete: () => {
                    this.requesting = false;
                }
            });
        },
        orderDetail(item) {
            wx.navigateTo({
                url: `/orderDetail?id=${item.id}`
            })
        },
        refund(item) {
            wx.navigateTo({
                url: `/refund?orderId=${item.id}`
            })
        },
        evaluate(item) {
            wx.navigateTo({
                url: `/evaluate?orderId=${item.id}&nickName=${item.merchant.nickName}&title=${item.product.title}`
            })
        }
    })
</script>

<style lang="less">
  .my-order {
    padding-bottom: 50px;
  }
</style>
