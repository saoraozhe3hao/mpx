<script type="application/json">
  {
    "usingComponents": {
      "van-card": "vant-weapp/dist/card/index",
      "van-rate": "vant-weapp/dist/rate/index",
      "van-cell-group": "vant-weapp/dist/cell-group/index",
      "van-button": "vant-weapp/dist/button/index",
      "van-toast": "vant-weapp/dist/toast/index",
      "mp-loading": "weui-miniprogram/miniprogram_dist/loading/loading"
    }
  }
</script>

<template>
  <view class="my-publish">
    <van-cell-group title="我发布的">
      <van-card>
        <view slot="footer">
        </view>
      </van-card>
      <van-card wx:for="{{products}}" wx:key="index" wx:if="{{products.length}}" lazy-load="true" currency=" "
                custom-class="card-item" tag="{{item.tags}}" title="{{ item.nickName }}" desc="{{ item.title }}"
                price="{{statusMap[item.status]}}" bindtap="productDetail(item)"
                thumb="{{'http://yqxq.oss-cn-hangzhou.aliyuncs.com/'+item.coverPhoto}}">
        <view slot="bottom">
          <van-rate value="{{ item.rate }}" readonly allow-half="true"/>
        </view>
        <view slot="footer">
          <text>{{item.startDate}} 到 {{item.endDate}}，50人预约</text>
        </view>
      </van-card>
    </van-cell-group>
    <view class="empty-data" wx:if="{{!products.length && !requesting}}"></view>
    <mp-loading type="circle" show="{{hasNext || requesting}}" class="loading" wx:ref="loading"></mp-loading>
    <van-button round icon="plus" bind:click="publish" class="plus-btn" wx:if="{{customerInfo.nickname}}"></van-button>
    <van-button round icon="plus" open-type="getUserInfo" bind:getuserinfo="getUserInfo" class="plus-btn"
                wx:else></van-button>
  </view>
  <van-toast id="van-toast"/>
</template>

<script>
    import {createPage} from '@mpxjs/core'
    import store from '../components/store'

    let app = getApp();
    createPage({
        data: {
            pageNum: 1,
            products: [],
            hasNext: false,
            requesting: false,  // 是否正在请求
            statusMap: {
                pending: '待审核',
                unapproved: '审核不通过',
                ordering: '预约中',
                underShelf: '已下架'
            }
        },
        onLoad(options) {
            wx.showShareMenu();
            wx.setNavigationBarTitle({
                title: '我的发布'
            });

            // 这里只是定义查询规则，后面的 exec() 才真正查询
            this.query = this.createSelectorQuery();
            this.query.select('.loading').boundingClientRect();
        },
        onShow() {
            this.getTabBar && this.getTabBar().setData({
                active: 1
            });

            this.pageNum = 1;
            this.products = [];
            this.fetchProducts();
        },
        computed: {
            customerInfo() {
                return store.state.customerInfo;
            }
        },
        onPageScroll() {
            // 正在查询元素，正在请求数据，没有更多数据
            if (this.requesting || !this.hasNext) {
                return;
            }
            this.query.exec((res) => {
                if (!this.requesting && res[0].top < store.state.systemInfo.windowHeight - 50) {
                    this.pageNum++;
                    this.fetchProducts();
                }
            })
        },
        fetchProducts() {
            this.requesting = true;
            wx.request({
                method: 'POST',
                url: `${app.globalData.basePath}/weapp/product/mine`,
                header: {
                    'Cookie': wx.getStorageSync("sessionId")
                },
                data: {
                    pageNum: this.pageNum,
                    pageSize: 10
                },
                success: (res) => {
                    res = res.data;
                    if (res.code == 0) {
                        this.products = this.products.concat(res.data.list);
                        this.hasNext = res.data.hasNextPage;
                        this.requesting = false;
                        setTimeout(()=>{
                            this.onPageScroll();  // 怕没滚动时，加载图标就出现了，主动触发一次滚动响应
                        },0);
                    } else if (res.code == 401) {
                        app.loginWx();
                    }
                },
                complete: () => {
                    this.requesting = false;
                }
            });
        },
        productDetail(item) {
            wx.navigateTo({
                url: `/productDetail?id=${item.id}`
            })
        },
        getUserInfo(res) {
            console.log(JSON.stringify(res));
            app.getUserInfo(res);
            this.publish();
        },
        publish() {
            wx.navigateTo({
                url: '/publish'
            })
        }
    })
</script>

<style lang="less" scoped>
  .my-publish {
    padding-bottom: 50px;
  }

  .plus-btn {
    position: fixed;
    width: 50px;
    bottom: 100px;
    left: 0;
    right: 0;
    margin: 0 auto;

    button {
      background: #FDD03F;
      border-color: #FDD03F;
      color: #FFF;
      font-weight: bold;
      box-shadow: 0 0 10px #AAA;
    }
  }
</style>
